{
  "recentFiles": [
    {
      "basename": "git checkout -b branch",
      "path": "Git/Git Branches/git checkout -b branch.md"
    },
    {
      "basename": "git branch --list",
      "path": "Git/Git Branches/git branch --list.md"
    },
    {
      "basename": "git branch",
      "path": "Git/Git Branches/git branch.md"
    },
    {
      "basename": "git status",
      "path": "Git/Git Basic/git status.md"
    },
    {
      "basename": "git push",
      "path": "Git/Git Basic/git push.md"
    },
    {
      "basename": "git log",
      "path": "Git/Git Basic/git log.md"
    },
    {
      "basename": "git clean -n",
      "path": "Git/Undoing changes/git clean -n.md"
    },
    {
      "basename": "Git Cheat Sheet",
      "path": "Git/Git Cheat Sheet.md"
    },
    {
      "basename": "Start from Base",
      "path": "Base/Start from Base.md"
    },
    {
      "basename": "OpenCV-python",
      "path": "OpenCV/OpenCV-python.md"
    },
    {
      "basename": "Unit test",
      "path": "Testing/Unit Test/Unit test.md"
    },
    {
      "basename": "git push remote branch",
      "path": "Git/Remote repositories/git push remote branch.md"
    },
    {
      "basename": "git pull remote",
      "path": "Git/Remote repositories/git pull remote.md"
    },
    {
      "basename": "git fetch remote branch",
      "path": "Git/Remote repositories/git fetch remote branch.md"
    },
    {
      "basename": "git remote add name url",
      "path": "Git/Remote repositories/git remote add name url.md"
    },
    {
      "basename": "git merge branch",
      "path": "Git/Git Branches/git merge branch.md"
    },
    {
      "basename": "git reflog",
      "path": "Git/Rewriting git history/git reflog.md"
    },
    {
      "basename": "git rebase base",
      "path": "Git/Rewriting git history/git rebase base.md"
    },
    {
      "basename": "git commit --amend",
      "path": "Git/Rewriting git history/git commit --amend.md"
    },
    {
      "basename": "git reset file_name",
      "path": "Git/Undoing changes/git reset file_name.md"
    },
    {
      "basename": "git revert commit",
      "path": "Git/Undoing changes/git revert commit.md"
    },
    {
      "basename": "git diff",
      "path": "Git/Git Basic/git diff.md"
    },
    {
      "basename": "git commit -m \"Message\"",
      "path": "Git/Git Basic/git commit -m \"Message\".md"
    },
    {
      "basename": "Начало работы в Git",
      "path": "Git/Начало работы в Git.md"
    },
    {
      "basename": "Как добавить файл в  Git Hub",
      "path": "Git/Как добавить файл в  Git Hub.md"
    },
    {
      "basename": "git add .",
      "path": "Git/Git Basic/git add ..md"
    },
    {
      "basename": "git config user.",
      "path": "Git/Git Basic/git config user..md"
    },
    {
      "basename": "git init",
      "path": "Git/Git Basic/git init.md"
    },
    {
      "basename": "git clone",
      "path": "Git/Git Basic/git clone.md"
    },
    {
      "basename": "assertEqual(a, b)",
      "path": "Testing/Unit Test/Unit test method/assertEqual(a, b).md"
    },
    {
      "basename": "assertRaises",
      "path": "Testing/Unit Test/Unit test method/assertRaises.md"
    },
    {
      "basename": "assertNotIsInstance(a, b)",
      "path": "Testing/Unit Test/Unit test method/assertNotIsInstance(a, b).md"
    },
    {
      "basename": "assertIsInstance(a, b)",
      "path": "Testing/Unit Test/Unit test method/assertIsInstance(a, b).md"
    },
    {
      "basename": "assertNotIn(a, b)",
      "path": "Testing/Unit Test/Unit test method/assertNotIn(a, b).md"
    },
    {
      "basename": "assertIn (a, b)",
      "path": "Testing/Unit Test/Unit test method/assertIn (a, b).md"
    },
    {
      "basename": "assertIsNot (a, b)",
      "path": "Testing/Unit Test/Unit test method/assertIsNot (a, b).md"
    },
    {
      "basename": "assertIsNone (x)",
      "path": "Testing/Unit Test/Unit test method/assertIsNone (x).md"
    },
    {
      "basename": "assertIs(a, b)",
      "path": "Testing/Unit Test/Unit test method/assertIs(a, b).md"
    },
    {
      "basename": "assertTrue (x)",
      "path": "Testing/Unit Test/Unit test method/assertTrue (x).md"
    },
    {
      "basename": "assertNotEqual(a, b)",
      "path": "Testing/Unit Test/Unit test method/assertNotEqual(a, b).md"
    },
    {
      "basename": "assertFalse (x)",
      "path": "Testing/Unit Test/Unit test method/assertFalse (x).md"
    },
    {
      "basename": "git add file_name",
      "path": "Git/Git Basic/git add file_name.md"
    },
    {
      "basename": "Given the triangle of consecutive odd numbers",
      "path": "Tasks from code vars/Given the triangle of consecutive odd numbers.md"
    },
    {
      "basename": "README",
      "path": "README.md"
    },
    {
      "basename": "Assertions",
      "path": "Testing/Assertions.md"
    },
    {
      "basename": "First program with OpenCV",
      "path": "OpenCV/First program with OpenCV.md"
    },
    {
      "basename": "Read contours",
      "path": "OpenCV/Read contours.md"
    },
    {
      "basename": "COLOR_BGR2HSV",
      "path": "OpenCV/Функции OpenCV/COLOR_BGR2HSV.md"
    },
    {
      "basename": "COLOR_BGR2GRAY",
      "path": "OpenCV/Функции OpenCV/COLOR_BGR2GRAY.md"
    },
    {
      "basename": "COLOR_BGR2LAB",
      "path": "OpenCV/Функции OpenCV/COLOR_BGR2LAB.md"
    }
  ],
  "omittedPaths": [],
  "maxLength": null,
  "openType": "tab"
}